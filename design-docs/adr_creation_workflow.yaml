schema: flowspec.v1
id: adr.creation.v1
title: Architecture Decision Record Creation Workflow
owner: architecture-team
labels:
  - architecture
  - decision-making
  - documentation

policy:
  enforcement: guard
  tokens_required: true
  events_required: false

context:
  domain: software-architecture
  brief: |
    Workflow for creating well-structured Architecture Decision Records (ADRs)
    that capture problems, options, decisions, and success criteria.

parameters:
  problem_domain:
    type: enum
    required: true
    enum_values:
      - architecture
      - testing
      - tooling
      - infrastructure
      - developer-experience
    example: architecture
  
  urgency:
    type: enum
    required: false
    default_value: normal
    enum_values:
      - low
      - normal
      - high
      - critical

roles:
  - id: human_architect
    kind: human
    desc: Human architect or technical lead who identifies problems and makes decisions
  
  - id: ai_assistant
    kind: ai
    desc: AI assistant that helps research, analyze options, and structure documentation
  
  - id: reviewer
    kind: human
    desc: Peer reviewer who validates the ADR

artifacts:
  inputs:
    - problem_description.md
    - existing_adrs/*.md
  outputs:
    - adr-{id}.md
    - adr-{id}.proto
  scratch:
    - research_notes.md
    - options_analysis.md

steps:
  - id: identify_problem
    title: Identify and Define Problem
    desc: Clearly articulate the problem that needs a decision
    role: human_architect
    instructions:
      - Describe the problem in one clear sentence
      - Explain why this needs a decision (what's at stake)
      - Identify where this fits in the problem hierarchy
      - List what's impacted if not solved
    prompts:
      user: |
        What problem are you trying to solve?
        - What's the one-sentence problem statement?
        - Why is this a problem? (impact)
        - What level is this? (strategic/architectural/tactical/operational)
        - Who or what is affected?
    acceptance:
      checks:
        - kind: content
          path: problem_statement
          keys: [statement, level, impact]
          on_fail: clarify_problem
        - kind: length
          path: problem_statement.statement
          min: 10
          on_fail: clarify_problem
          severity: warning
    next:
      - to: research_options
        when: problem_clear
      - to: clarify_problem
        when: problem_unclear
  
  - id: clarify_problem
    title: Clarify Problem Statement
    desc: Refine unclear problem statements
    role: ai_assistant
    instructions:
      - Ask clarifying questions about the problem
      - Help articulate the core issue
      - Suggest problem framing
      - Identify missing context
    prompts:
      system: |
        You are helping refine a problem statement for an ADR.
        Ask targeted questions to clarify:
        1. What exactly is the problem?
        2. Why does it matter?
        3. What's the scope?
        4. What happens if not solved?
      user: |
        Current problem statement: {problem_statement}
        Help me clarify this.
    token:
      advisory: false
      scope:
        fs_read: [existing_adrs]
    next:
      - to: identify_problem
  
  - id: research_options
    title: Research and Identify Options
    desc: Discover and document possible solutions
    role: ai_assistant
    instructions:
      - Research industry best practices
      - Identify at least 3 viable options
      - For each option, document pros, cons, and tradeoffs
      - Include research links and references
      - Consider "do nothing" as an option if relevant
    prompts:
      system: |
        Research solutions for this problem. For each option:
        1. Describe what it is
        2. List pros (be specific)
        3. List cons (be realistic)
        4. Identify the key tradeoff
        5. Find 2-3 references or examples
        
        Minimum 3 options required.
      user: |
        Problem: {problem_statement}
        Domain: {problem_domain}
        
        Research possible solutions.
    token:
      advisory: false
      scope:
        net: read
        fs_read: [existing_adrs, research_notes]
        fs_write: [research_notes, options_analysis]
        lease_ms: 300000
    acceptance:
      checks:
        - kind: count
          path: options
          min: 3
          on_fail: research_more_options
          severity: error
        - kind: content
          path: options[*]
          keys: [name, pros, cons, tradeoffs]
          on_fail: complete_option_analysis
    metrics:
      options_found: count
      research_time_ms: duration
    next:
      - to: analyze_tradeoffs
        when: sufficient_options
      - to: research_more_options
        when: insufficient_options
  
  - id: research_more_options
    title: Research Additional Options
    desc: Find more alternatives if initial research insufficient
    role: ai_assistant
    instructions:
      - Explore alternative approaches
      - Consider hybrid solutions
      - Look for edge case solutions
      - Document why additional options are viable
    token:
      scope:
        net: read
        fs_write: [research_notes]
    next:
      - to: research_options
  
  - id: analyze_tradeoffs
    title: Analyze Tradeoffs
    desc: Deep dive into tradeoffs between options
    role: human_architect
    instructions:
      - Review all options and their tradeoffs
      - Consider project constraints (time, team, complexity)
      - Identify deal-breakers for each option
      - Think about long-term implications
      - Consider what's reversible vs irreversible
    prompts:
      user: |
        Review these options:
        {options_summary}
        
        For your context:
        - What are your key constraints?
        - What's reversible vs irreversible?
        - What aligns with team skills?
        - What's the 2-year outlook?
    acceptance:
      checks:
        - kind: content
          desc: Tradeoff analysis completed
    next:
      - to: make_decision
  
  - id: make_decision
    title: Make Decision
    desc: Choose an option and document rationale
    role: human_architect
    instructions:
      - Select the best option for your context
      - Write clear rationale (3-5 sentences minimum)
      - Explain why this option over others
      - Document any concerns or caveats
      - Note implementation considerations
    prompts:
      user: |
        Choose the best option and explain:
        - Which option? (must reference an analyzed option)
        - Why this one?
        - Why not the others?
        - What are you trading off?
        - Any concerns about this choice?
    acceptance:
      checks:
        - kind: content
          path: decision
          keys: [chosen_option_id, rationale]
          on_fail: incomplete_decision
        - kind: length
          path: decision.rationale
          min: 100
          on_fail: weak_rationale
          severity: warning
    next:
      - to: define_success_criteria
  
  - id: define_success_criteria
    title: Define Success Criteria and Metrics
    desc: Establish how to measure if this decision works
    role: ai_assistant
    instructions:
      - Define 3-7 concrete success criteria (testable/observable)
      - Identify quantitative metrics (numbers to track)
      - Identify qualitative metrics (feedback/observations)
      - Ensure metrics are actually measurable
    prompts:
      system: |
        Create success criteria that are:
        1. Specific and concrete
        2. Observable or measurable
        3. Achievable within 3-6 months
        4. Directly related to the problem
        
        Format:
        - Success Criteria: âœ… statements (5-7 items)
        - Quantitative Metrics: numbers to track
        - Qualitative Metrics: feedback to gather
      user: |
        Problem: {problem_statement}
        Decision: {decision_summary}
        
        Define success criteria and metrics.
    token:
      scope:
        fs_write: [scratch]
    acceptance:
      checks:
        - kind: count
          path: success_criteria.criteria
          min: 3
          on_fail: add_more_criteria
        - kind: content
          path: success_criteria.metrics
          keys: [quantitative, qualitative]
    next:
      - to: define_triggers
  
  - id: define_triggers
    title: Define Revisit Triggers
    desc: Establish evidence-based conditions to revisit decision
    role: ai_assistant
    instructions:
      - Define 3-5 evidence-based triggers (not time-based)
      - Each trigger should be an observable condition
      - Include severity level (when to act)
      - Make triggers specific and measurable
      - Group related triggers
    prompts:
      system: |
        Create revisit triggers that are:
        1. Evidence-based (not "review in 6 months")
        2. Observable (can detect when they occur)
        3. Specific (clear conditions)
        4. Actionable (know what to do)
        
        Examples:
        - "Coupling detected: Any tool depends on another tool"
        - "Scale indicator: More than 10 tools in workspace"
        - "Performance: Build time exceeds 2 minutes"
      user: |
        Decision: {decision_summary}
        Metrics: {metrics_summary}
        
        What observable conditions indicate this decision should be revisited?
    token:
      scope:
        fs_write: [scratch]
    acceptance:
      checks:
        - kind: count
          path: triggers
          min: 3
          on_fail: add_more_triggers
    next:
      - to: assess_risks
  
  - id: assess_risks
    title: Assess Risks and Migration Cost
    desc: Document risks and cost to change course
    role: human_architect
    instructions:
      - List risks of the chosen option (2-5 items)
      - For each risk, note mitigation strategy
      - Estimate migration cost to other options
      - Document rollback cost/complexity
      - Consider sunk cost if decision fails
    prompts:
      user: |
        For your chosen option:
        - What could go wrong?
        - How do you mitigate each risk?
        - How hard to switch to another option?
        - Can you rollback? What's the cost?
    acceptance:
      checks:
        - kind: content
          path: risks
          keys: [risks, migration]
        - kind: count
          path: risks.risks
          min: 2
    next:
      - to: generate_adr_document
  
  - id: generate_adr_document
    title: Generate ADR Document
    desc: Create structured ADR in markdown and protobuf
    role: ai_assistant
    instructions:
      - Compile all information into ADR template
      - Generate markdown document (human-readable)
      - Generate protobuf message (machine-readable)
      - Ensure all required fields populated
      - Add metadata (id, date, author, status)
      - Cross-link with related ADRs
    prompts:
      system: |
        Generate complete ADR document with all sections:
        1. Metadata (ID, title, status, author, date)
        2. Problem Statement (with stack and impact)
        3. Options Analyzed (all options with pros/cons)
        4. Decision (chosen option and rationale)
        5. Success Criteria (with metrics)
        6. Triggers to Revisit
        7. Risks and Migration Cost
        8. Summary table
        
        Also generate protobuf representation.
      user: |
        Compile all gathered information into ADR.
        Use template from existing ADRs.
    token:
      advisory: false
      scope:
        fs_read: [existing_adrs, scratch]
        fs_write: [outputs]
        lease_ms: 60000
    acceptance:
      checks:
        - kind: file
          path: outputs/adr-{id}.md
          on_fail: regenerate
        - kind: file
          path: outputs/adr-{id}.proto
          on_fail: regenerate
        - kind: content
          path: outputs/adr-{id}.md
          keys: 
            - Problem Statement
            - Options
            - Decision
            - Success Criteria
            - Triggers
            - Risks
    metrics:
      adr_size_bytes: file_size
      sections_count: section_count
    next:
      - to: review_adr
  
  - id: review_adr
    title: Peer Review ADR
    desc: Have another person review the ADR for quality
    role: reviewer
    instructions:
      - Check problem statement is clear
      - Verify options are well-researched
      - Validate decision rationale makes sense
      - Ensure success criteria are measurable
      - Check triggers are observable
      - Verify risks and migration costs documented
      - Provide constructive feedback
    prompts:
      user: |
        Review this ADR:
        {adr_document}
        
        Check:
        - Is problem clear?
        - Are options well-analyzed?
        - Does decision make sense?
        - Are success criteria measurable?
        - Are triggers evidence-based?
        - Are risks documented?
    acceptance:
      checks:
        - kind: content
          desc: Review feedback provided
        - kind: content
          desc: Approval or change requests documented
    next:
      - to: finalize_adr
        when: approved
      - to: revise_adr
        when: changes_requested
  
  - id: revise_adr
    title: Revise ADR Based on Feedback
    desc: Address review comments and update ADR
    role: human_architect
    instructions:
      - Address all review comments
      - Update relevant sections
      - Re-generate document
      - Document what changed
    token:
      scope:
        fs_write: [outputs]
    next:
      - to: review_adr
  
  - id: finalize_adr
    title: Finalize and Publish ADR
    desc: Mark ADR as active and integrate into decision registry
    role: human_architect
    instructions:
      - Update status from "draft" to "active"
      - Add to decision registry/index
      - Update related ADRs if needed
      - Notify relevant stakeholders
      - Set up monitoring for metrics
      - Schedule first metrics review
    token:
      scope:
        fs_write: [outputs, adr_registry]
    acceptance:
      checks:
        - kind: content
          path: adr.status
          allowed: [active]
        - kind: file
          path: adr_registry/index.md
          desc: Registry updated
    metrics:
      total_time_ms: workflow_duration
    emit_events:
      - adr.created
      - adr.activated
    next:
      - to: workflow_complete

  - id: workflow_complete
    title: Workflow Complete
    desc: ADR creation finished
    role: human_architect
    instructions:
      - Archive workflow artifacts
      - Document any process improvements
      - Celebrate good decision-making
    acceptance:
      checks:
        - kind: file
          path: outputs/adr-{id}.md
          desc: ADR file exists
